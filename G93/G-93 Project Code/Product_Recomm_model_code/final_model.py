# -*- coding: utf-8 -*-
"""Product-Recommendation-Chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AKsnO2IcRpMzh8UmCNOXCp1E_ylb4vzJ
"""

!pip install openai

!pip install -U sentence-transformers

import openai
import numpy as np
import pandas as pd

from sklearn.metrics.pairwise import cosine_similarity

api_key ="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"
openai.api_key = api_key

product_data =pd.read_excel('/content/Dataset.xlsx')
product_data_df=pd.DataFrame(product_data)

product_data_df.head()

product_data_df['features'] = product_data_df.apply(
   lambda row: f"{row['Rear_Camera']},{row['Front_Camera']},{row['Space']},{row['RAM']},{row['CPU_Speed']},{row['Price']}",
    axis=1
)
product_data_df.head()

# Initialize user_query_vector with default values (0 for unspecified specs)
user_query_vector = [0, 0, 0, 0, 0, 0]

print("Enter Following Details of mobile [Enter 0 if specs not decided]")
print("Rear Camera Specification :")
rear = int(input())
user_query_vector[0] = rear

print("Front Camera Specification :")
front = int(input())
user_query_vector[1] = front

print("Space :")
space = int(input())
user_query_vector[2] = space

print("RAM :")
ram = int(input())
user_query_vector[3] = ram

print("CPU Speed :")
cpu = float(input())
user_query_vector[4] = cpu

print("Price :")
price = int(input())
user_query_vector[5] = price

print("User Query Vector:", user_query_vector)
4

# input_data = [rear,front,space,ram,cpu,price]
# # changing the input_data to numpy array
# input_data_as_numpy_array = np.asarray(input_data)

# # reshape the array as we are predicting for one instance
# user_query_vector = input_data_as_numpy_array.reshape(1,-1)

# Compute the cosine similarity matrix
cosine_sim = cosine_similarity(product_data_df[['Rear_Camera', 'Front_Camera', 'Space', 'RAM', 'CPU_Speed', 'Price']])

def recommend_products(user_query_vector, product_name, cosine_sim_matrix, data, top_n=5):
    # Vectorize the user query, including the product name
   # user_query_vector = [48,20,128,6,0,499]  # Replace with the actual user query vector



    # Calculate the cosine similarity between the user query vector and all product feature vectors
    similarity_scores = cosine_similarity([user_query_vector], product_data_df[['Rear_Camera', 'Front_Camera', 'Space', 'RAM', 'CPU_Speed', 'Price']])

    # Get the indices of the top N product recommendations
    product_indices = similarity_scores.argsort()[0][-top_n:][::-1]

    # Retrieve the product names and features associated with the recommended product indices
    recommended_products = []
    for i in product_indices:
        product_info = {
            'Name': data.loc[i, 'Product_Name'],
            'Rear Camera': data.loc[i, 'Rear_Camera'],
            'Front Camera': data.loc[i, 'Front_Camera'],
            'Space': data.loc[i, 'Space'],
            'RAM': data.loc[i, 'RAM'],
            'CPU Speed': data.loc[i, 'CPU_Speed'],
            'Price': data.loc[i, 'Price']
        }
        recommended_products.append(product_info)

    return recommended_products

def generate_chatbot_response(user_query, recommended_products):
    chatbot_response = f"Based on your query '{user_query}', we recommend the following products:\n"

    for i, product_info in enumerate(recommended_products, 1):
        chatbot_response += f"{i}. {product_info['Name']} - "
        chatbot_response += f"Rear Camera: {product_info['Rear Camera']}, "
        chatbot_response += f"Front Camera: {product_info['Front Camera']}, "
        chatbot_response += f"Space: {product_info['Space']}, "
        chatbot_response += f"RAM: {product_info['RAM']}, "
        chatbot_response += f"CPU Speed: {product_info['CPU Speed']}, "
        chatbot_response += f"Price: {product_info['Price']}\n"

    return chatbot_response

# User's query with potential null values
user_query = "I want a smartphone with a good camera."
product_name = "LG"  # Replace with the specific product name

# Get the top 5 recommended products along with their features
top_5_recommended_products = recommend_products(user_query_vector, product_name, cosine_sim, product_data_df, top_n=6)

# Generate a chatbot response
chatbot_response = generate_chatbot_response(user_query, top_5_recommended_products)


print(chatbot_response)

